// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monai.Deploy.InformaticsGateway.Integration.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DICOMwebSTOW_RSServiceFeature : object, Xunit.IClassFixture<DICOMwebSTOW_RSServiceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DicomWebStow.feature"
#line hidden
        
        public DICOMwebSTOW_RSServiceFeature(DICOMwebSTOW_RSServiceFeature.FixtureData fixtureData, Monai_Deploy_InformaticsGateway_Integration_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "DICOMweb STOW-RS Service", "    This feature tests the DICOMweb STOW-rS services provided by the Informatics " +
                    "Gateway.\n\n    Requirements covered:\n    - [STOW-RS] MIG SHALL be able to allow u" +
                    "sers to upload DICOM objects via DICOMweb STOW-RS", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Triggers a new workflow request via DICOMWeb STOW-RS")]
        [Xunit.TraitAttribute("FeatureTitle", "DICOMweb STOW-RS Service")]
        [Xunit.TraitAttribute("Description", "Triggers a new workflow request via DICOMWeb STOW-RS")]
        [Xunit.TraitAttribute("Category", "messaging_workflow_request")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "dicomweb_stow")]
        [Xunit.InlineDataAttribute("MR", "1", new string[0])]
        [Xunit.InlineDataAttribute("MG", "2", new string[0])]
        public void TriggersANewWorkflowRequestViaDICOMWebSTOW_RS(string modality, string count, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "messaging_workflow_request",
                    "messaging",
                    "dicomweb_stow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("modality", modality);
            argumentsOfScenario.Add("count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triggers a new workflow request via DICOMWeb STOW-RS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
        testRunner.Given(string.Format("{0} {1} studies", count, modality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
        testRunner.When("the studies are uploaded to the DICOMWeb STOW-RS service at \'/dicomweb/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
        testRunner.Then("1 workflow requests sent to message broker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
        testRunner.And("studies are uploaded to storage service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
        testRunner.And("the temporary data directory has been cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Triggers a new workflow with given study instance UID request via DICOMWeb STOW-R" +
            "S")]
        [Xunit.TraitAttribute("FeatureTitle", "DICOMweb STOW-RS Service")]
        [Xunit.TraitAttribute("Description", "Triggers a new workflow with given study instance UID request via DICOMWeb STOW-R" +
            "S")]
        [Xunit.TraitAttribute("Category", "messaging_workflow_request")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "dicomweb_stow_study")]
        [Xunit.InlineDataAttribute("CT", "2", new string[0])]
        [Xunit.InlineDataAttribute("US", "1", new string[0])]
        public void TriggersANewWorkflowWithGivenStudyInstanceUIDRequestViaDICOMWebSTOW_RS(string modality, string count, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "messaging_workflow_request",
                    "messaging",
                    "dicomweb_stow_study"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("modality", modality);
            argumentsOfScenario.Add("count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triggers a new workflow with given study instance UID request via DICOMWeb STOW-R" +
                    "S", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
        testRunner.Given(string.Format("{0} {1} studies", count, modality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
        testRunner.When("the studies are uploaded to the DICOMWeb STOW-RS service at \'/dicomweb/\' with Stu" +
                        "dyInstanceUid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
        testRunner.Then("1 workflow requests sent to message broker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
        testRunner.And("studies are uploaded to storage service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
        testRunner.And("the temporary data directory has been cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Triggers a new workflow via DICOMWeb STOW-RS")]
        [Xunit.TraitAttribute("FeatureTitle", "DICOMweb STOW-RS Service")]
        [Xunit.TraitAttribute("Description", "Triggers a new workflow via DICOMWeb STOW-RS")]
        [Xunit.TraitAttribute("Category", "messaging_workflow_request")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "dicomweb_stow")]
        [Xunit.InlineDataAttribute("MR", "2", new string[0])]
        [Xunit.InlineDataAttribute("US", "1", new string[0])]
        public void TriggersANewWorkflowViaDICOMWebSTOW_RS(string modality, string count, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "messaging_workflow_request",
                    "messaging",
                    "dicomweb_stow"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("modality", modality);
            argumentsOfScenario.Add("count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triggers a new workflow via DICOMWeb STOW-RS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
        testRunner.Given(string.Format("{0} {1} studies", count, modality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
        testRunner.And("a workflow named \'MyWorkflow\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
        testRunner.When("the studies are uploaded to the DICOMWeb STOW-RS service at \'/dicomweb/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
        testRunner.Then("1 workflow requests sent to message broker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
        testRunner.And("studies are uploaded to storage service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
        testRunner.And("the temporary data directory has been cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Triggers a specific workflow with given study instance UID request via DICOMWeb S" +
            "TOW-RS")]
        [Xunit.TraitAttribute("FeatureTitle", "DICOMweb STOW-RS Service")]
        [Xunit.TraitAttribute("Description", "Triggers a specific workflow with given study instance UID request via DICOMWeb S" +
            "TOW-RS")]
        [Xunit.TraitAttribute("Category", "messaging_workflow_request")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "dicomweb_stow_study")]
        [Xunit.InlineDataAttribute("MR", "2", new string[0])]
        [Xunit.InlineDataAttribute("US", "1", new string[0])]
        public void TriggersASpecificWorkflowWithGivenStudyInstanceUIDRequestViaDICOMWebSTOW_RS(string modality, string count, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "messaging_workflow_request",
                    "messaging",
                    "dicomweb_stow_study"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("modality", modality);
            argumentsOfScenario.Add("count", count);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triggers a specific workflow with given study instance UID request via DICOMWeb S" +
                    "TOW-RS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
        testRunner.Given(string.Format("{0} {1} studies", count, modality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
        testRunner.And("a workflow named \'MyWorkflow\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
        testRunner.When("the studies are uploaded to the DICOMWeb STOW-RS service at \'/dicomweb/\' with Stu" +
                        "dyInstanceUid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
        testRunner.Then("1 workflow requests sent to message broker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
        testRunner.And("studies are uploaded to storage service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
        testRunner.And("the temporary data directory has been cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DICOMwebSTOW_RSServiceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DICOMwebSTOW_RSServiceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
