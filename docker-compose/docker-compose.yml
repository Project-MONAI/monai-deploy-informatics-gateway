# Copyright 2022 MONAI Consortium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3.10-management
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "monaideploy"
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - monaideploy

  minio:
    image: "minio/minio:latest"
    command: server --console-address ":9001" /data
    hostname: minio
    volumes:
      - ./.run/minio/data:/data
      - ./.run/minio/config:/root/.minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - monaideploy

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - ./.run/mongodb/:/data/db
    networks:
      - monaideploy
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/productiondb --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  orthanc:
    image: osimis/orthanc:22.9.0
    hostname: orthanc
    volumes:
      - ./configs/orthanc.json:/etc/orthanc/orthanc.json
      - .run/orthanc:/var/lib/orthanc/db/
    ports:
      - "1114:1114"
      - "8089:8089"
    environment:
      VERBOSE_ENABLED: "true"
    networks:
      - monaideploy
    healthcheck:
      test: ["CMD", "/probes/test-aliveness.py"]
      start_period: 10s
      retries: 3
      interval: 15s
      timeout: 30s

  elasticsearch:
    profiles: [ 'elk' ]
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    hostname: elasticsearch
    volumes:
      - ./configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - .run/esdata:/usr/share/elasticsearch/data:rw,z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
      ELASTIC_CLIENT_APIVERSIONING: "true"
    networks:
      - monaideploy
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  logstash:
    profiles: [ 'elk' ]
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    volumes:
      - ./configs/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./configs/pipeline.yml:/usr/share/logstash/config/pipeline.yml:ro,Z
      - ./configs/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      LS_JAVA_OPTS: "-Xmx2g -Xms2g"
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - elasticsearch
    networks:
      - monaideploy

  kibana:
    profiles: [ 'elk' ]
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    volumes:
      - ./configs/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monaideploy
    healthcheck:
      test: curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'
      interval: 10s
      timeout: 10s
      retries: 120

  kibana-setup:
    profiles: [ 'elk' ]
    image: curlimages/curl:latest
    volumes:
      - ./configs/kibana.ndjson:/usr/share/kibana.ndjson
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - monaideploy
    entrypoint: >
      /bin/sh -c "
      curl -X POST http://kibana:5601/api/saved_objects/_import?createNewCopies=true -H 'kbn-xsrf: true' --form file=@/usr/share/kibana.ndjson
      "

networks:
  monaideploy:
    name: monaideploy
    driver: bridge
